;;; -*- Mode: LISP; Syntax: Joshua; Package: aplan; readtable: joshua -*- 

;;; First attempt at trudy network description

(in-package :aplan)

(defsite it-network "192.168.0.0" "192.168.255.255")
(defsite voyage-network "172.31.0.0" "172.31.255.255")

(defexternal-internet outside ("192.0.0.0" "255.0.0.0"))
;;; how to handle the engineering network?
;;; also should we have a subnet, the cctv example has one but never uses it...

;;;;;;;;
;; Communication pool
;; (routers and switches in our network model)
;;;;;;;;

(make-object 'authorization-pool :name 'communication-pool)

(defcapability communication-super-user communication-pool)

(defcapability communication-user-write communication-pool
  :greater (communication-super-user))

(defcapability communication-user-read communication-pool
  :greater (communication-user-write)) 

;; Define users in communication pool
;; do we need to have different communication pools
;; for different networks? or do we have one admin that can access all of the networks

(defuser router-administrator
  :capabilities (communication-super-user)
  :authorization-pools (communication-pool))

(defuser switch-administrator
  :capabilities (communication-super-user)
  :authorization-pools (communication-pool))

;;; dont know what second field should be here
(defrouter cradlepoint-router ("192.168.0.1" "10.0.0.0")
  :authorization-pool communication-pool
  :superuser router-administrator
  :external-networks (outside))

;; the specs don't list an ip for the furuno hub so i dont know what to put here
(defswitch furuno-switch switch "172.31.0.0" :authorization-pool communication-pool :superuser switch-administrator)

;; Define resources in communication pool
(defresource router-password-file password-file
    :capability-requirements ((write communication-super-user) (read communication-user-read))
    :machines (cradlepoint-router))

(defresource router-configuration-file configuration-file
    :capability-requirements ((write communication-super-user) (read communication-user-read))
    :machines (cradlepoint-router))

(defresource switch-configuration-file configuration-file
    :capability-requirements ((write communication-super-user) (read communication-user-read))
    :machines (furuno-switch))


;;;;;;;;;;;;;;;;;;;;;;;
;; "IT Network" pool
;; Just what they define in the specs
;; includes email server, 
;; 
;;;;;;;;;;;;;;;;;;;;;;;


;; Define router access policies 


(tell-negative-policy cradlepoint-router telnet ("192.0.0.0"  "255.0.0.0"))

;; first argument is allowed range, the second argument is the blacklisted range
;; can take more arugments?
(tell-positive-policy cradlepoint-router ssh ("0.0.0.0"  "0.0.0.0") ("192.0.0.0"  "255.0.0.0"))

(tell-positive-policy cradlepoint-router email ("0.0.0.0"  "0.0.0.0") ("192.0.0.0"  "255.0.0.0"))

;; Define switch access policies
(tell-negative-policy furuno-switch telnet ("192.1.0.0" "255.255.0.0"))

;; why do we have this? it doesn't seem to be defining any range...
(tell-positive-policy furuno-switch ssh  ("0.0.0.0"  "0.0.0.0"))

(tell-positive-policy furuno-switch email  ("0.0.0.0"  "0.0.0.0"))

;;;;;;;;;;;;;;;;;;;;;;;
;; "IT Network" pooltell
;; Just what they define in the specs
;; includes email server, 
;; 
;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Server pool 
;;
;; encompasses Storage Server, Display Server, 
;; and Video Processing Server
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(make-object 'authorization-pool :name 'server-pool)

;; Capabilities for server pool 
(defcapability server-super-user server-pool)

(defcapability server-user-write server-pool
  :greater (server-super-user))

(defcapability server-user-read server-pool
  :greater (server-user-write)) 

;; Define users for server pool
(defuser server-administrator
  :capabilities (server-super-user)
  :authorization-pools (server-pool))

(defuser server-user
  :capabilities (server-user-write)
  :authorization-pools (server-pool))

;; Ok, what are the different types of "computers"
;; that we input to this function, are they defined somewhere
;; or are just strings that we define, where are they stored??
;; Note -- I think that these are in object-defs.lisp
;; how would we handle 10.*.*.* ip addresses, should we
;; make our valid ip range really wide or what?
(defcomputer storage linux-computer "10.0.0.3"
	     :authorization-pool server-pool
	     :superuser server-administrator)


;; Define machines/computers for server pool
;(defcomputer storage linux-computer "192.1.1.2"
;  :authorization-pool server-pool
;  :superuser server-administrator)



;(defcomputer display linux-computer "192.1.1.3"
;  :authorization-pool server-pool
;  :superuser server-administrator)

;; what is this video-processing thing?
;; we don't have this in the trudy system model
(defcomputer video-processing linux-computer "192.1.1.4"
  :authorization-pool server-pool
  :superuser server-administrator)

(defcomputer central-display navnet "192.1.1.8"
	     :authorization-pool server-pool
	     :superuser server-administrator)

;; Define resources in server pool
(defresource video-database database
    :capability-requirements ((write server-super-user) (read server-user-read))
    :machines (storage))

;; TODO: need to define new data types for a VM (since we 
;; running a windows VM on the linux machine)

;; TODO: we need to find a way to describe the cell tower connection
;; in our system model 

;; Question: is there just one user w/ superuser privilege in both
;; the engineering and other (forget the name) networks
;; these are just the manager device and it does everything under the hood
;; can't run commands in a terminal, so could you technically have root privilege?




;; Note: need to make object definitions for computations 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Manager pool 
;;
;; encompasses Main Operator Console Server, and  Video Surveillance Manager
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(make-object 'authorization-pool :name 'manager-pool)

;; Capabilities for manager pool 
(defcapability manager-super-user manager-pool)

(defcapability manager-user-write manager-pool
  :greater (manager-super-user))

(defcapability manager-user-read manager-pool
  :greater (manager-user-write)) 

;; Define users for manager pool
(defuser manager-administrator
  :capabilities (manager-super-user)
  :authorization-pools (manager-pool))

(defuser manager-user
  :capabilities (manager-user-write)
  :authorization-pools (manager-pool))

;; Define machines/computers for manager pool
(defcomputer main-operator-console windows-7-computer "192.1.1.5"
  :authorization-pool manager-pool
  :superuser manager-administrator)

(defcomputer typical-video-surveillance-manager windows-7-computer "192.1.1.6"
  :authorization-pool manager-pool
  :superuser manager-administrator)

;; Define resources in server pool

;; Master password file contains login info for all servers/devices on the network
(defresource master-password-file password-file
    :capability-requirements ((write manager-super-user) (read manager-user-read))
    :machines (main-operator-console))

;; Local password file contains login info for the (camera) devices that fall under the video-surveillance-manager
(defresource local-password-file password-file
    :capability-requirements ((write manager-user-write) (read manager-user-read))
    :machines (typical-video-surveillance-manager))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Device pool 
;;
;; encompasses Video Surveillance Manager, and IoT Camera
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(make-object 'authorization-pool :name 'device-pool)

;; Capabilities for device pool 
(defcapability device-super-user device-pool)

(defcapability device-user-write device-pool
  :greater (device-super-user))

(defcapability device-user-read device-pool
  :greater (device-user-write))

;; Define users for device pool
(defuser device-administrator
  :capabilities (device-super-user)
  :authorization-pools (device-pool))

;; Define machines/computers for device pool
(defcomputer typical-camera embedded-linux-computer "192.1.1.7"
  :authorization-pool device-pool
  :superuser device-administrator)

;; define video-machine-policy
(tell-negative-policy typical-camera telnet ("192.0.0.0" "255.0.0.0"))

(tell-positive-policy typical-camera ssh ("0.0.0.0" "0.0.0.0"))

;;; must follow the previous guy
;;; since it refers to it
(defuser device-user
  :user-type typical-user
  :capabilities (device-user-write)
  :authorization-pools (device-pool)
  :machines (typical-camera))

;; Define resources for device pool
(defresource devices-scheduler-policy scheduler-policy-file
  :capability-requirements ((write device-super-user) (read device-user-read))
  :machines (typical-camera))

(defresource devices-password-file password-file
  :capability-requirements ((write device-super-user) (read device-user-read))
  :machines (typical-camera))

(defresource device-video-file graphic-video-file 
  :capability-requirements ((write device-user-write) (read device-user-read))
  :machines (typical-camera))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Processes and attackers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Instantiate server processes
(instantiate-a-process 'storage-server-process '(storage))
(instantiate-a-process 'display-server-process '(display))
(instantiate-a-process 'video-processing-server-process '(video-processing))

;; Instantiate manager processes
(instantiate-a-process 'operator-console-server-process '(main-operator-console))
(instantiate-a-process 'video-surveillance-manager-process '(typical-video-surveillance-manager))

;; Instantiate device processes
(instantiate-a-process 'typical-user-process '(typical-camera) :role-name 'typical-camera-process)

;; Instantiate attacker
;;; A lot of this is a complete hack.  What we'd like to say is that the attacker is 
;;; somewhere that can contact the router of the victim.
;;; So we're should specify his machine, what network he lives on (the-wild)
;;; and then we need to update all the stuff about the connect, reachable etc
;;; predicates.

(create-attacker 'typical-attacker :world-name 'the-wild)

;;;(defsubnet attacker-subnet switched-subnet "10.0.0.0" "255.0.0.0")
;;;
;;;(defswitch attacker-switch switch "10.1.1.1" )
;;;(tell-policy attacker-switch ssh :positive-location-mask "0.0.0.0" :positive-location-address "0.0.0.0")

